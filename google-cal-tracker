// Define the name of the sheet to read/write data and the column number.
function defineCellRange(sheetName,weekNumber) {
  var myProject = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/16mP3GLWkk7sfP-JLKI_DNbn_Vnko_WQ_enOAVXjDGYM/');
  var mySheet = myProject.getSheetByName(sheetName);
  var inputColumn = mySheet.getRange(2,2,14,20);
  var columnNumber = weekNumber + 2;
  var simpleArray = new Array(12);
  for (var i = 0; i < 12; i++) {
    simpleArray[i] = i;
  }
  var cellColorArray1 = new Array(12);
  for (var i = 0; i < 12; i++) {
    cellColorArray1[i] = inputColumn.getCell((simpleArray[i]+1),columnNumber);
  }
  // Logger.log('%s (%s)',cellContents, cellColorArray1[1]);
  return cellColorArray1;
}

function eventTracker() {
  
  // Get Calendar 
  var calendarId = 'primary';
  
  var today = new Date();
  var oneWeekAgo = new Date(Date.now() - 1000*60*60*168);
  // Check that I'm using the correct range of dates (should be 1 week)
  Logger.log('%s - %s)', oneWeekAgo, today);

  
  // I used this to determine each week when populating past weekly cells
/*
  var startWeek1 = new Date('December 30, 2019 00:00:00 -0800');
  var endWeek1 = new Date('January 6, 2020 00:00:00 -0800');
  Logger.log('%s %s',startWeek1,endWeek1);
*/

  
  //Populate an array with numbers 1-12.
  var simpleArray = new Array(12);
  for (var i = 0; i < 12; i++) {
    simpleArray[i] = i;
  }
  
  // Access Google Calendar Time Tracker spreadsheet and input data for specified color category.
  // Create array of category cells (location in spreadsheet). index 0 is 'undefined' cell.
  var cellColorArray1 = defineCellRange('Data Import', 1);
  
  // Populate cells with 0.00 to reset
  for (i = 0; i < 12; i++) {
    cellColorArray1[i].setValue(0);
  }

  
  // Define optional arguments
  var optionalArgs = {
    timeMin: (oneWeekAgo).toISOString(),
    timeMax: (new Date()).toISOString(),
    // timeMin: (startWeek1).toISOString(),
    // timeMax: (endWeek1).toISOString(),
    showDeleted: false,
    singleEvents: true,
    maxResults: 1000,
    orderBy: 'startTime',
  };
  
  // Get past week Events in array  
  var response = Calendar.Events.list(calendarId, optionalArgs);
  var events = response.items;

  // Get time and color of event per week
  if (events.length == 0) {
    Logger.log('No events found.');
    }
  else {
    // loop through the events
    for (i = 0; i < events.length; i++) {    
      // get one event from the list of events
      var myEvent = events[i];
      // get the color of the single event
      var colorID = parseInt(myEvent.colorId);
      // get the start date of the single event and convert format
      var start = new Date(getDateFromIso(myEvent.start.dateTime));
      // get the end date of the single event and convert format
      var end = new Date(getDateFromIso(myEvent.end.dateTime));
      // Get duration of event
      var duration = ((end - start)/(1000 * 60 * 60)); 
      // Check if all day event
      if (myEvent.start.date) {
        Logger.log('%s (%s)', myEvent.summary, 'ALL DAY EVENT');
      }
      else {

      // Add total duration per week for each color in spreadsheet
        switch(colorID){
          case 1:
            var cellContents = cellColorArray1[1].getValue();
            cellColorArray1[1].setValue(cellContents + duration);
            break;
          case 2:
            var cellContents = cellColorArray1[2].getValue();
            cellColorArray1[2].setValue(cellContents + duration);
          case 3:
            var cellContents = cellColorArray1[3].getValue();
            cellColorArray1[3].setValue(cellContents + duration);
            break;
          case 4:
            var cellContents = cellColorArray1[4].getValue();
            cellColorArray1[4].setValue(cellContents + duration);
            break;
          case 5:
            var cellContents = cellColorArray1[5].getValue();
            cellColorArray1[5].setValue( cellContents + duration);
            // Logger.log('%s (%s)', myEvent.summary,duration);
            break;
          case 6:
            var cellContents = cellColorArray1[6].getValue();
            cellColorArray1[6].setValue( cellContents + duration);
            break;
          case 7:
            var cellContents = cellColorArray1[7].getValue();
            cellColorArray1[7].setValue( cellContents + duration);
            break;
          case 8:
            var cellContents = cellColorArray1[8].getValue();
            cellColorArray1[8].setValue( cellContents + duration);
            break;
          case 9:
            var cellContents = cellColorArray1[9].getValue();
            cellColorArray1[9].setValue( cellContents + duration);
            break;
          case 10:
            var cellContents = cellColorArray1[10].getValue();
            cellColorArray1[10].setValue( cellContents + duration);
            break;
          case 11:
            var cellContents = cellColorArray1[11].getValue();
            cellColorArray1[11].setValue( cellContents + duration);
            break;
          default:
            var cellContents = cellColorArray1[0].getValue();
            cellColorArray1[0].setValue(cellContents + duration);
            Logger.log('%s (%s)', myEvent.summary,duration);
            break;
        }
      }
    }
  }
}
